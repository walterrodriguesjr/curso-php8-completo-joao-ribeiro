https://www.youtube.com/playlist?list=PLXik_5Br-zO9wODVI0j58VuZXkITMf7gZ

1-introdução ao curso 
-ok

2-o que é o PHP e como funciona? 
-linguagem de programação web 
-destinado para produçã ode conteúdo dinâmico 

3-instalação do laragon e php8 
-ok 

4-instalação do visual studio code e extensões para php 
ok 


5 FLUXO DE FUNCIONAMENTO DO AMBIENTE DE DESENVOLVIMENTO E ALGUNS AJUSTAMENTOS
-ok 

6 COMO CRIAR SCRIPT DE PHP E COMO USAR PHP COM HTML
-a maneira padrão, abrir e fechar o script de PHP: <?php  ?> 

7-PORQUÊ INDEX PHP E INDEX HTML
-index remete a: "índice" 
-por padrão do apache, index.html tem precedência ao index.php, porém, pode ser alterado 

8-APRESENTAÇÃO DE CONTEÚDO EM PHP
-usa-se o echo e o print (printr para arrays)

9-COMENTÁRIOS EM PHP
-sistema para documentar o código. 
-comentário não aparece na tela quando o código é rodado
-atalho: shift + alt + a 

10-VARIÁVEIS
-variável é como se fosse uma caixa, onde é possível guardar todo tipo de dado. 
-a variável suporta operações aritméticas 
-as variáveis não são tipadas 
-seus valores podem ser redefinidas e serem alteradas 
-variáveis são caseSensitive 

11-TIPOS DE DADOS
-existem vários tipos de variáveis: texto, int, float, booleano, array, objeto
-php não é tipado, sendo assim, que uma variável pode receber qualquer tipo de dado 
-objetos são instâncias de uma classe, pode conter diversos dados, usando chave e valor 

12-OPERADOR DE ATRIBUIÇÃO E OPERADORES MATEMÁTICOS
-os de atribuição temos: = (recebe), ==(igual em valor), === (igual em valor e tipo);
-os matemáticos são: +, -, *, /, % (módulo - resto), ** (potência)

13-OPERADORES COMBINADOS E DE INCREMENTO E DECREMENTO
-permite alterar o valor de uma variável, a partir do seu valor original 
- +=, -=, *=, /= 
-tem caráter simplificatório 
-temos também operadores de incremento e decremento 
- ++, -- 
-o incremento pode ser antes ou depois da variável, porém, se inserido antes, quando imprimir, já irá 
    exibir com a alteração, se for depois da variável, ainda não irá aparecer a diferença na primeira 
    impressão. 

14-EXERCÍCIOS COM OPERADORES ARITMÉTICOS E DE ATRIBUIÇÃO
-ok 

15-OPERADORES DE COMPARAÇÃO E SPACESHIP OPERATOR 
-como o nome diz, serve para mensurar se um valor é maior, igual ou menor que outro.
-Se é o mesmo tipo também ou não.
-Se é diferente, e se é diferente em valor e tipo 
-retorna sempre um booleano 
-spaceship operator: <=> se é menor, igual ou maior ($x = 3 <=> 2) neste caso $x recebe 1, por 3 ser maior, mas pode receber zero se for igual e -1, se for menor. 

16-OPERADORES LÓGICOS
-operadores com ação de: e, ou e negação (&&, ||, !)
-existe precedência de operadores 

17-INTRODUÇÃO A STRINGS, CONCATENAÇÃO, HEREDOC E NOWDOC
-string é uam série de caracteres, que podem ser: letras, espaços e algarismos.  
-pode ser envolto por aspas simples e aspas duplas: (single quote, double quote) 
-a concatenação, geralmente se usa o 'ponto', para ligar diferentes strings 

18-CARACTERES DE ESCAPE, TERMINAL E HTML ENTITIES
-caracteres de escape servem para delimitar uma area numa string, evitar por aspas duplas dentro de aspas simples 
-usa-se tmb o contrabarra \n, para informar onde a linha de uma string deve ser quebrada 

19-FUNÇÕES PARA OPERAR COM STRINGS
-funções são blocos de códigos que podem ser criados conforme a necessidade, mas também temos as funções nativas do php, com ações pré definidas . 
-geralmente recebem a variavel a qual será trabalhada, e as vezes também valores de inicio e fim da posição da string 

20-EXERCÍCIOS COM STRINGS E ATIVAÇÃO DE MÓDULOS
-módulos por padrão a maioria vem 'comentadas' no arquivo php.ini (com ponto e vírgula), sendo necessário descomentar para usar 

21-ARRAYS NUMÉRICOS E ARRAYS ASSOCIATIVOS
-arrays são coleções de valores (ex: lista de mercado, vários itens dentro de uma variável)
-cada item tem um índice, começando sempre da posição zero  
-arrays associativos: são aqueles que tem uam chave personalizada: ex: array = ['nome' => 'Walter'], chama: array['nome'] 

22-ARRAYS MISTOS E ARRAYS MULTIDIMENSIONAIS
-arrays mistos: são aqueles que combinam índices númericos e strings (nada comum)
-arrays multidimensionais: são arrays dentro de outro array

23-INSTRUÇÃO CONDICIONAL IF, IF ELSE, IF ELSEIF ELSE
-são instruções utilizadas para controlar o fluxo da aplicação de acordo com determinadas condições

24-INSTRUÇÃO CONDICIONAL SWITCH E SINTAXE ALTERNATIVA
-é um sistema de condicional semelhante ao if/else, porém recebe uma variável, e os cases de cada bloco do switch, analisam se é igual 

25-OPERADOR TERNÁRIO
-é um tipo de estrutura condicional simplificada (abreviada) 

26-NOVA INSTRUÇÃO CONDICIONAL MATCH DO PHP 8
-semelhante ao switch, porém mais compacto 

27-CICLO WHILE
-primeiro verifica, depois executa
-importante sempre alterar a condição, incrementando, para não entrar num loop infinito

28-CICLO DO WHILE
-semelhanteao while, porem ele executa antes de verificar, ou seja, mesmo que não atenda a condição, 
    ele vai executar a ação pelo menos uma vez 

29-CICLO FOR
-tipo de ciclo de repetição também 
-constituído por 3 parametros: 
-inicialização(contador), condição e incremento(ou decremento)

30-CICLO FOREACH
-é o tipo de ciclo de iteração dedicado a arays 
-pode também trabalhar com chave e valor ($key => $value)

31-BREAK, CONTINUE E GOTO
-break = interrompe a execução de um loop 
-continue = pula e avança para o próximo ciclo 
-GOTO = nãO MAIS UTILIZADO 

32-CRIAÇÃO DE FUNÇÕES
-functions são blocos de códigos que permitem er reutilizados 
-elas tem ações pré determinadas para algo específico 
-necessitam após serem criadas, ser chamadas para então serem executadas 
-existem funções nativas do PHP, mas também é comum criar as próprias funções 
-funções aceitam parâmetros, que servem para passar um dado de fora, para ser usada dentro da função 

33-PARÂMETROS DE FUNÇÕES
-como falado anteriormente, é possível inserir nos parênteses da função, parâmetros (dados)
-detalhe, a maneira como o parâmetro está escrito na construção da função e dentro, não precisa ser igual 
    o que está na chamada da função, pois, pelo fato da função poder ser chamada quantas vezes quiser, 
    é possível usar variáveis diferentes em cada chamada 
-parâmetros é o nome das variáveis existentes na definição da função (na criação dela)
-argumentos são dados passados na chamada da função (para que ela seja executada)

34-PARÂMETROS OPCIONAIS
-é quando se estabelece um valor default para um parâmetro na criação da função, porém, na chamada, 
    caso seja passado um argumento para esse parâmetro, então ele é substituído 
-os parâmetros opcionais devem ser posto no final do entre parênteses 

35-NAMED ARGUMENTS PHP8
-é a possibilidade, em uma função com vários parâmetros, e dentre eles, vários opcionais com valor 
    default, quando na chamada da função, é possível nomear cada valor de argumento, usando antes do valor 
    do argumento, o nome dele, seprando o nome e valor por 2 pontos. 

36-NOTAS ADICIONAIS SOBRE PARÂMETROS E VARIADIC PARAMETER
-a função só pode ser chamada quando seus parâmetros são corretamente passadas 
-variadic parameter, é passar um parâmetros com 3 pontos, porém, que nele, é possivel incluir vários 
    argumentos enviados pela chamada da função. Assim, o parâmetro da função se torna um array que recebe 
    vários dados que chegam pelo argumento da chamada da função 

37-A EXPRESSÃO RETURN NUMA FUNÇÃO
-a expressão return dentro de uma função provoca o fim da execução da função 
-retorna ao local onde a função foi chamada 
-geralmente usado para devolver um valor 

38-ESCOPO DE UMA VARIÁVEL E EXPRESSAO GLOBAL
-o escopo de uma variável, é o limite onde ela existe ou não existe 
-se uma variável é criada dentro de uma função, ela só existe lá dentro 
-é possível trazer para dentro de uma função, uma variável criado fora dela, sendo necessário usar a expressão global 
-quando variáveis são criadas dentro de condicionais ou loops, ao encerrar a operação destes, a variável não é destruída 

39-FUNÇÕES ANÓNIMAS
-função anônima não tem nome 
-geralmente é atribuída a uma variável 
-para chamar ela, chama-se a variável a qual foi atribuída a função 

40-CLOSURES E ARROW FUNCTIONS
-clousure = são um tipo de função anônima(sem nome, e dentro de uma variável), que além de seu parâmetro normal, 
    aceita o use($parametroa, $parametrob), nestes, pode se usar variáveis globais, ou seja, estas variáveis externas 
    podem ser vistas dentro desta função, porém, o conteúdo destas, não podem ser alterados, somente utilizados 
-arrow function = são um tipo de função anônima escrita de uma maneira mais resumida, capturam automaticamente as variáveis 
    globais, usam a palavra reservada fn(), não usam chaves 

41-GENERATORS
-ok 

42-INTRODUÇÃO A CLASSES, PROPRIEDADES E MÉTODOS
-classe = é um molde, uma forma, que permite criar objetos a sua semelhança 
    cada classe tem seus atributos e métodos, que ao criar um objeto, estes tmb recebem 
    ex: class Humano 
        propriedades(variáveis): altura, pelo, cabelo 
        métodos: caminhar(funções). cantar(), dormir() 

43-CRIAÇÃO DE OBJETOS, INSTANCIAÇÃO
-para ter acesso a propriedades e métodos de uma classe, é preciso instancia-la, ou seja, criar um 
    objeto apartir da classe. 
-nos métodos das classes, usa-se o $this parautilizar seus atributos, this refere-se a esta mesma(classe)

44-INSTANCIAÇÃO, CONSTRUCT E EXEMPLOS
-CONSTRUCTOR = método nativo PHP dentro da class que sempre é executado automaticamente quando criado 
    um objeto.

45-PROPERTY PROMOTION NO PHP 8
-as classes podem ter além de propridades e métodos, apenas 1 ou outro também 
-é permitido, definir a propriedade dentro do parâmetro do construct e tmb o seu modificador de acesso 
-PROPERTY PROMOTION é pq o parâmetro do construct é promovido a propriedade 

46-CLASSES ANÓNIMAS
-geralmente usada quando não se pretende instanciar mais de 1 objeto desta class anônima, usa o new class 

47-HERANÇA DE CLASSES
-uma classe pode herdar propriedades e/ou métodos de uma outra, para isso, usa o método extends da class principal 

48-OVERRIDE EM CLASSES
-override permite, a classe derivada alterarem propriedades e métodos herdadas das classes principais

49-IMPEDIR HERANÇA COM A EXPRESSÃO FINAL
-a expressão FINAL, serve para que, uma classe derivada não possa fazer override de métodos da class 
    pai 
-lembrnado que o override srve para que a class derivada reusa a função da class pai, porem, permite 
    alterar a ação da function 
-o final pode ser usado na class pai tmb, impedindo que a class em si possa ser herdada 

50-ACCESS LEVELS PUBLIC, PROTECTED E PRIVATE
-são os 3 tipos de níveis de acesso para elementos dentro de uma class 
-public = estão sempre acessíveis a partir do objeto instanciado, são públicas de modo geral 
-protected = podem ser alcançados dentro da class e dentro de uma class que seja uma extenção
     através de uma função que utilize a referida propriedade, ou seja, não é possível acessar diretamente 
     a propriedade através do objeto instanciado 
-as propriedades ou métodos private só podem ser acessadas quando instanciada a própria class onde eles 
    estão e desde que estejam sendo chamadas através de uma função desta própria class. Mesmo estanciando 
    a class onde a propriedade está, não é possível acessar diretamente a propridade, sendo necessário 
    uma função a utilizando para acessar. 

51-VAR E OBJECT ACCESS
-só existe por retrocompatibilidade com versão antigas do PHP, porém não mais recomendada usar 
-serve para definir uma propriedade da class como 'var'
- OBJECT ACCESS seve para um objeto já instanciado acessar e modificar um valor de um segundo objeto 

52-GETTERS E SETTERS
-os termos get e set são usados por convenção, porém, as 2 funções podem ser nomeadas como achar melhor 
-o GET se refere a retornar dados, o SET se refere a alterar o valor de uma propridade 

53-STATIC
-as propriedades e métodos 'static' de uma class, para serem acessadas não necessitam de instanciação, 
    ou seja, podem ser acessadas e alteradas diretamente a partir da chamada da class e em seguida a 
    a propriedade e/ou método 
-geralmente o conceito de static é usado para quando se deseja ter funções mais 'generalistas', funções 
    que não existem nativas no PHP, porém que tmb não quer ficar fazendo instanciações. 

54-UM EXEMPLO PRÁTICO DO USO DE STATIC
-funções genéricas de uso geral usando o conceito static

55-CONST, DEFINE E DEFINED
-constantes são usadas para definir um valor fixo a uma variável ou propriedade 
-usa-se o termo 'const' antes. Por padrão, as const são públicas, pelo fato de que por serem constantes, 
    mesmo que sejam publicas, não existe risco de seus valores sejam alterados. 
-podem ser chamadas usando a metologia de instanciação, bem como chamar direto como as static 
-a conmstante é definida no escopo global do script 
-não permite fazer concatenações 
-é possível usar tmb a 'define' para criar constantes locais ou globais 
-por convenção, os nomes devem ser em maiúsculo 

56-CONSTANTES MÁGICAS
-ok 

57-BREVE ABORDAGEM SOBRE CLASSES ABSTRATAS
-a classe abstrata podem tmb ter functions abstratadas, porem, a classe abstrata não pode ser instanciada 
    diretamente para que seus parâmetros ou métodos sejam acessados, sendo necessário primeiro, criar 
    uma classe extends dela, e ae então instancia esta classe para que possa ser acessada.
-a classe abstrata pode pré definir functions, para que, a classe que herdar, possa de fato definir a 
    ação da function e a usar 
-não é muito comum utilizar 

58-TRAITS E A SUA UTILIDADE
-trait são um conjunto de métodos, que podem ser reutilizados em outra classe, sem 
    a necessidade de fazer herança (extends). para isso, ao definir a class que irá fazer uso dos métodos 
    da trait, deve apenas chamar a class trait através do comando 'use'. Em seguida, é possível fazer a 
    instanciação da class que optou por usar os métodos da trait normalmente. 
-o bloco de trait não é definida como uma class, por tanto não é uma classe, é um bloco de código. 

59-INTRODUÇÃO AO INCLUDE
-o INCLUDE é uma ferramenta de importação de script, servem para você trazer dados que estão em outro arquivo do 
    código, para este em que você o está chamado
-ao fazer o include, os dados referentes ao arquivo importado, ficam disponíveis no arquivo atual 
-o include pode usar tanto o caminho realtivo, quando o caminho absoluto, sempre usando o ../ 

60-UTILIZAÇÃO DO REQUIRE E DIFERENÇA RELATIVAMENTE AO INCLUDE
-além do include, ainda existem outras 3 formas de importação de scripts 
-require = a diferença para o include é que, o include se falhar a leitura do código ainda continua, já 
    o require, caso haja falha, ele para a execução dó código  

61-INCLUDE ONCE, REQUIRE ONCE E RETURN NAS INCLUSÕES
-INCLUDE_ONCE = incluir uma única vez, se foi anteriormente incluído, o php ignora
-REQUIRE_ONCE = requerir uma única vez, se foi anteriormente requerido, o php ignora
-ambos são mais aconselhavel, pois assegura o sucesso da ação

62-DECLARATION TYPES
-serve para poder tipar as variáveis, pois o php é fracamente tipado, e não exige a tipagem, porem, 
    possibilita caso queria fazer 
-é possível tipificar variáveis diversas, parâmetros ou argumentos de funções

63-STRINCT TYPING
-o php tende a converter os tipos de dados para que o sistema funcione, no caso de que uma função com 
    parâmetro tipado seja string, e no argumento da chamada da função, passse um int, ele converte  
    porém, usando o método nativo chamado: declare(strict_types=1) no início do script, ele força o php 
    a exigir a tipagem correta 
-é possível ter mais de uma opção de tipagem no parâmetro da função 

64-TYPE CONVERSIONS
-serve para converter o tipo de dado de uma variavel, quando atribuido a outra variável 

65-TESTANDO VARIÁVEIS, ISSET, EMPTY, IS NULL E UNSET
-são métodos nativos do php para fazer diversos tipos de teste 
-isset = serve para saber se está definida uma variável, retornando um boolean 
-empty = serve para verificar se uma variável existente, está vazia, com 0, null ou false, retorna um boolean
-unset = serve para que, uma variável que já tenha um determinado dado, ao usar unset, ela limpa a variável  
    da memória, como se não existisse(garbage collector) 

66-NULL COALESCING OPERADOR
-ok 

67-VERIFICAR TIPOS DE VARIÁVEIS
-são métodos nativos do php para verificar e validar o tipo de dados contido dentro de uma determinada 
    variável 
-is_array(), is_bool(), is_float() etc... 

68-PRINT R, VAR DUMP E VAR EXPORT
-serve para obter informações de conteúdo a partir de uma variável 
-print_r = para debugar dados tipo array ou objeto
-var_dump = informa o conteúdo e o tipo da variável
-var_export = exibe o conteúdo entre aspas

69-FINAL DA PLAYLIST
-

